#!/usr/bin/env sh

# shellcheck disable=SC2166,SC2145,SC2009,SC2034

# Disable UTF-8 to speeds up script execution.
export LANG='POSIX'

# Built-in `wc -l` as alternative command.
wc_l()
{
    while IFS= read -r line || [ -n "$line" ]; do
        lines=$((lines+1))
    done </dev/stdin

    printf '%s\n' "$lines"

    lines=
}

# Parse kernel, version, and machine architecture.
for STRING in $(uname -mrs); do
    N=$((N+1))
    case "$N" in
        1) KERN="$STRING"
        ;;
        2) KVER="$STRING"
        ;;
        3) MACH="$STRING"
        ;;
    esac
done

# Determine current OS.
case "$KERN" in
    Linux|GNU*|*BSD|DragonFly|Bitrig)
       :
    ;;
    *) printf '%s\n' "Unknown OS detected! '${KERN}' currently not supported yet." >&2
       exit 1
    ;;
esac

getUser()
{
    printf "${c4}%s${c1}@${c2}%s" "${USER:-$(id -nu)}" "${HOST:-$(hostname)}"
}

getDistro()
{
    if [ -f '/bedrock/etc/bedrock-release' -a -z "$BEDROCK_RESTRICT" ]; then
        PRETTY_NAME='Bedrock Linux'
    elif [ -f '/etc/os-release' ]; then
        . /etc/os-release
    else
        PRETTY_NAME='Unknown'
    fi

    printf "${c5}${@}  ${c7}%s" "${PRETTY_NAME:-${NAME}} ${MACH:-Unknown}"
}

getKernel()
{
    printf "${c5}${@}  ${c7}%s" "${KVER:-Unknown}"
}

getWM()
{
    if [ -x "$(command -v xprop)" ]; then
        XPROP_ID="$(xprop -root -notype _NET_SUPPORTING_WM_CHECK)" \
        XPROP_WM="$(xprop -id "${XPROP_ID##*#\ }" -notype _NET_WM_NAME)" \
        WM="${XPROP_WM##*_NET_WM_NAME\ =\ \"}" \
        WM="${WM%%\"*}"
    fi

    if [ -z "$WM" -o "$WM" = 'LG3D' ]; then
        WM="$(ps -e | grep -m1 -o \
                               -e 'sway' \
                               -e 'kiwmi' \
                               -e 'wayfire' \
                               -e 'sowm' \
                               -e 'catwm' \
                               -e 'fvwm' \
                               -e 'dwm' \
                               -e '2bwm' \
                               -e 'monsterwm' \
                               -e 'tinywm' \
                               -e 'xmonad'
            )"
    fi

    printf "${c5}${@}  ${c7}%s" "${WM:-Unknown}"
}

getPackages()
{
    for MANAGER in apt \
                   dnf \
                   emerge \
                   nix-env \
                   pacman \
                   rpm \
                   xbps-query
    do
        PKG_MNGR="$(command -v "$MANAGER")"
        [ ! -x "$PKG_MNGR" ] || break
    done

    case "${PKG_MNGR##*/}" in
        apt       ) GET_PKGS="$(dpkg-query -f '${binary:Package}\n' -W)"
        ;;
        dnf       ) GET_PKGS="$(dnf list installed)"
        ;;
        emerge    ) GET_PKGS="$(for P in /var/db/pkg/*/*; do echo "$P"; done)"
        ;;
        nix-env   ) GET_PKGS="$(nix-store -q --requisites /run/current-system/sw)"
                    PKG_MNGR='nix'
        ;;
        pacman    ) GET_PKGS="$(pacman -Qq)"
        ;;
        rpm       ) GET_PKGS="$(rpm -qa --last)"
        ;;
        xbps-query) GET_PKGS="$(xbps-query -l)"
        ;;
    esac

    COUNT="$(wc_l <<- EOF
				${GET_PKGS}
			EOF
           )"

    printf "${c5}${@}  ${c7}%s (%s)" "$COUNT" "${PKG_MNGR##*/}"
}


getUptime()
{
    IFS=. read -r s _ </proc/uptime 

    # Convert uptime into readable value.
    d="$((s / 60 / 60 / 24))"
    h="$((s / 60 / 60 % 24))"
    m="$((s / 60 % 60))"

    # Plurals.
    [ "$d" -gt 1 ] && dp=s
    [ "$h" -gt 1 ] && hp=s
    [ "$m" -gt 1 ] && mp=s
    [ "$s" -gt 1 ] && sp=s

    # Hide empty fields.
    [ "$d" = 0 ] && d=
    [ "$h" = 0 ] && h=
    [ "$m" = 0 ] && m=
    [ -n  "$m" ] && s=

    # Make the output of uptime smaller.
    [ "$d" ] && UPTIME="${d} day${dp}, "
    [ "$h" ] && UPTIME="${UPTIME}${h} hour${hp}, "
    [ "$m" ] && UPTIME="${UPTIME}${m} min${mp}"
    [ "$s" ] && UPTIME="${UPTIME}${s} sec${sp}"

    printf "${c5}${@}  ${c7}%s" "${UPTIME%,\ }"
}

getPalette()
{
    for SEQ in 1 2 3 4 5 6; do
        printf '\033[9%sm%s\033[0m' "$SEQ" '  '
    done
}

# ANSI colour sequences.
bo='\033[1m'     # Bold.
c0='\033[30m'    # Black.
c1='\033[31m'    # Red.
c2='\033[32m'    # Green.
c3='\033[33m'    # Yellow.
c4='\033[34m'    # Blue.
c5='\033[35m'    # Magenta.
c6='\033[36m'    # Cyan.
c7='\033[37m'    # White.
c8='\033[90m'    # Grey.
rs='\033[0m'     # Reset.
bb="${bo} ${c4}" # Bold blue.
bg="${bo} ${c2}" # Bold green.

# Print ASCII coffee and relax.
printf                 "
${bb}    ) )     ${bo}%s
${bb}   ( (      ${bo}%s
${bg} ........   ${bo}%s
${bg} |      |]  ${bo}%s
${bg} \      /   ${bo}%s
${bg}  '____'    ${bo}%s
             %s      \n" \
"$(getUser            )" \
"$(getDistro     ''  )" \
"$(getKernel     ''  )" \
"$(getWM         ''  )" \
"$(getPackages   ''  )" \
"$(getUptime     ''  )" \
"$(getPalette         )"

exit ${?}
